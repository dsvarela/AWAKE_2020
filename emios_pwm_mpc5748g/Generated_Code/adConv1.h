/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : adConv1.h
**     Project     : emios_pwm_mpc5748g
**     Processor   : MPC5748G_176
**     Component   : adc_sar
**     Version     : Component C55_Repository, Driver 01.00, CPU db: 3.00.000
**     Repository  : SDK_S32_PA_11
**     Compiler    : GNU C Compiler
**     Date/Time   : 2020-07-15, 15:55, # CodeGen: 0
**     Contents    :
**         ADC_DRV_GetDefaultConfigConverter  - void ADC_DRV_GetDefaultConfigConverter(adc_conv_config_t *const config);
**         ADC_DRV_ConfigConverter            - void ADC_DRV_ConfigConverter(const uint32_t instance,const adc_conv_config_t...
**         ADC_DRV_ChainConfig                - void ADC_DRV_ChainConfig(const uint32_t instance,const adc_chain_config_t...
**         ADC_DRV_Reset                      - void ADC_DRV_Reset(const uint32_t instance);
**         ADC_DRV_EnableChannel              - void ADC_DRV_EnableChannel(const uint32_t instance,const adc_conv_chain_t...
**         ADC_DRV_DisableChannel             - void ADC_DRV_DisableChannel(const uint32_t instance,const adc_conv_chain_t...
**         ADC_DRV_StartConversion            - void ADC_DRV_StartConversion(const uint32_t instance,const adc_conv_chain_t...
**         ADC_DRV_GetStatusFlags             - uint32_t ADC_DRV_GetStatusFlags(const uint32_t instance);
**         ADC_DRV_ClearStatusFlags           - void ADC_DRV_ClearStatusFlags(const uint32_t instance,const uint32_t mask);
**         ADC_DRV_GetConvResultsToArray      - uint32_t ADC_DRV_GetConvResultsToArray(const uint32_t instance,const...
**         ADC_DRV_DoCalibration              - status_t ADC_DRV_DoCalibration(const uint32_t instance);
**         ADC_DRV_Powerup                    - void ADC_DRV_Powerup(const uint32_t instance);
**         ADC_DRV_Powerdown                  - void ADC_DRV_Powerdown(const uint32_t instance);
**         ADC_DRV_EnableInterrupts           - void ADC_DRV_EnableInterrupts(const uint32_t instance,const uint32_t...
**         ADC_DRV_DisableInterrupts          - void ADC_DRV_DisableInterrupts(const uint32_t instance,const uint32_t...
**         ADC_DRV_EnableChannelInterrupt     - void ADC_DRV_EnableChannelInterrupt(const uint32_t instance,const uint32_t...
**         ADC_DRV_DisableChannelInterrupt    - void ADC_DRV_DisableChannelInterrupt(const uint32_t instance,const uint32_t...
**         ADC_DRV_SetPresamplingSource       - void ADC_DRV_SetPresamplingSource(const uint32_t instance,const...
**         ADC_DRV_EnableChannelPresampling   - void ADC_DRV_EnableChannelPresampling(const uint32_t instance,const uint32_t...
**         ADC_DRV_DisableChannelPresampling  - void ADC_DRV_DisableChannelPresampling(const uint32_t instance,const uint32_t...
**         ADC_DRV_EnablePresampleConversion  - void ADC_DRV_EnablePresampleConversion(const uint32_t instance);
**         ADC_DRV_DisablePresampleConversion - void ADC_DRV_DisablePresampleConversion(const uint32_t instance);
**         ADC_DRV_EnableDma                  - void ADC_DRV_EnableDma(const uint32_t instance);
**         ADC_DRV_DisableDma                 - void ADC_DRV_DisableDma(const uint32_t instance);
**         ADC_DRV_EnableChannelDma           - void ADC_DRV_EnableChannelDma(const uint32_t instance,const uint32_t chnIdx);
**         ADC_DRV_DisableChannelDma          - void ADC_DRV_DisableChannelDma(const uint32_t instance,const uint32_t chnIdx);
**         ADC_DRV_SetDmaClearSource          - void ADC_DRV_SetDmaClearSource(const uint32_t instance,const...
**         ADC_DRV_GetConvInfoToArray         - uint32_t ADC_DRV_GetConvInfoToArray(const uint32_t instance,const...
**         ADC_DRV_AbortConversion            - void ADC_DRV_AbortConversion(const uint32_t instance);
**         ADC_DRV_AbortChain                 - void ADC_DRV_AbortChain(const uint32_t instance);
**         ADC_DRV_ConfigWdg                  - void ADC_DRV_ConfigWdg(const uint32_t instance,const uint8_t...
**         ADC_DRV_SetWdgThreshold            - void ADC_DRV_SetWdgThreshold(const uint32_t instance,const uint8_t...
**         ADC_DRV_SetWdgChannelMapping       - void ADC_DRV_SetWdgChannelMapping(const uint32_t instance,const uint32_t...
**         ADC_DRV_EnableChannelWdg           - void ADC_DRV_EnableChannelWdg(const uint32_t instance,const uint32_t chnIdx);
**         ADC_DRV_DisableChannelWdg          - void ADC_DRV_DisableChannelWdg(const uint32_t instance,const uint32_t chnIdx);
**         ADC_DRV_WdgIsChanOutOfRange        - bool ADC_DRV_WdgIsChanOutOfRange(const uint32_t instance,const uint32_t chnIdx);
**         ADC_DRV_ClearWdgOutOfRangeFlag     - void ADC_DRV_ClearWdgOutOfRangeFlag(const uint32_t instance,const uint32_t...
**         ADC_DRV_GetConvResult              - uint16_t ADC_DRV_GetConvResult(const uint32_t instance,const uint32_t chnIdx);
**         ADC_DRV_GetConvInfo                - void ADC_DRV_GetConvInfo(const uint32_t instance,const uint32_t...
**         ADC_DRV_GetWdgThresholdFlags       - uint32_t ADC_DRV_GetWdgThresholdFlags(const uint32_t instance);
**         ADC_DRV_ClearWdgThresholdFlags     - void ADC_DRV_ClearWdgThresholdFlags(const uint32_t instance,const uint32_t...
**
**     Copyright 1997 - 2015 Freescale Semiconductor, Inc. 
**     Copyright 2016-2017 NXP 
**     All Rights Reserved.
**     
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file adConv1.h
** @version 01.00
*/         
/*!
**  @addtogroup adConv1_module adConv1 module documentation
**  @{
*/         
#ifndef adConv1_H
#define adConv1_H
/* MODULE adConv1. */

/**
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.5, global macro not referenced
 * There are global macros defined to be used by the integrator and another one used as include guard.
 */

/* Include inherited beans */
#include "clockMan1.h"
#include "Cpu.h"
#include "adc_sar_driver.h"

/*! @brief Device instance number */
#define INST_ADCONV1 1U

#define  ADCONV1_THR_NUM0  1U
#define  ADCONV1_CHN_NUM0  0U

/*! @brief Chain Configuration declaration */

/*! @brief Converter Configuration declaration */
extern const adc_conv_config_t adConv1_ConvCfg0;

/*! @brief Analog Watchdog Configuration declaration */
extern const adc_wdg_threshold_values_t adConv1_ThreshCfg0[ADCONV1_THR_NUM0];

#endif
/* ifndef adConv1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.1 [05.21]
**     for the NXP C55 series of microcontrollers.
**
** ###################################################################
*/
